<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sboy_front</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>player_hitbox</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>depth = 0;
move = false;
ghost = false;
flashlight = false;
characterdirection = "down";

plstate = playerstate.woflashlight;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
/*state system if needed later
switch (plstate)
{
    case  playerstate.wflashlight:
        if flashlight = false
        {
            plstate = playerstate.woflashlight;
        }
        
        
        
    break;
    case  playerstate.woflashlight:
        if flashlight = true
        {
            plstate = playerstate.wflashlight;   
        }
        
    break;

        
}
*/

//inputs

key_up = keyboard_check(ord('W'));
key_down = keyboard_check(ord('S'));
key_right = keyboard_check(ord('D'));
key_left = keyboard_check(ord('A'));

key_action = keyboard_check(ord('C'));
key_flash = keyboard_check(ord('V'));
key_ability = keyboard_check(ord('B'));
key_reload = keyboard_check(ord('X'));
key_menu = keyboard_check(ord('Z'));

key_switchnorm = keyboard_check(ord('1'));
//normal light
key_switchr = keyboard_check(ord('2'));
//ability laser
key_switchb = keyboard_check(ord('3'));
//ability barrier
key_switchg = keyboard_check(ord('4'));
// ability slow

/*controls 2
key_action 
interacts with objects
when battery out action reloads battery
key_flash
flash light attack
key_action and key_flash
lens ablility
key_switch 
cycles lens
key_menu
opens inventory and pause menu
*/

//movement



if !key_flash
{
    if key_up
    {
        if y &lt;= 88 // change to global var for all 4 walls
            {
            
            }
            else
            {
            
            y -= 1.25
            }            
    }

    if key_down
    {
        if y &gt;= 196
            {
            
            }
            else
            {
           
            y += 1.25
            }            
    }        
    
    if key_right
    {
        if x &gt;= 338
            {
            
            }
            else
            {
            
            x += 1.25
            }            
    }
   
    if key_left
    {
        if x &lt;= 10
            {
            
            }
            else
            {
            
            x -= 1.25
            }            
    }

}



// battery pick up
if place_meeting(x,y,obj_battery) &amp;&amp; key_action
{
    global.player1battery = 600;
    global.player1batterycount += 1;
    instance_destroy(obj_battery)
}

//flashlight pick up
if place_meeting(x,y,obj_flashlight) &amp;&amp; key_action
{
    global.player1flash = 1;
    flashlight = true
    instance_destroy(obj_flashlight)
}

//flashlight attack
if global.player1battery = 0
{
    global.player1flash = 1;
    instance_destroy(obj_lightleft)
    instance_destroy(obj_lightright)
    instance_destroy(obj_lightup)
    instance_destroy(obj_lightdown)
    instance_destroy(obj_lightdownright)
    instance_destroy(obj_lightdownleft)
    instance_destroy(obj_lightupleft)
    instance_destroy(obj_lightupleft)
  
}



if flashlight= true &amp;&amp; !global.player1battery = 0
{


if sprite_index = sboyflash_left &amp;&amp; key_flash
    {
        
        instance_create(obj_sboy.x-8,obj_sboy.y-2,obj_lightleft)
    }
else
    {
        
        instance_destroy(obj_lightleft)
    }

if sprite_index = sboyflash_right &amp;&amp; key_flash
    {
        
        instance_create(obj_sboy.x+7,obj_sboy.y-1,obj_lightright)
    }
else
    {
        
        instance_destroy(obj_lightright)
    }

    
    if sprite_index = sboyflash_front &amp;&amp; key_flash
    {
        
        instance_create(obj_sboy.x-6,obj_sboy.y-1,obj_lightdown)
    }
else
    {
        
        instance_destroy(obj_lightdown)
    }
    
       if sprite_index = sboyflash_back &amp;&amp; key_flash
    {
        
        instance_create(obj_sboy.x+6,obj_sboy.y-3,obj_lightup)
    }
else
    {
        
        instance_destroy(obj_lightup)
    }


       
       if sprite_index = sboyflash_downright &amp;&amp; key_flash
    {
        
        instance_create(obj_sboy.x,obj_sboy.y,obj_lightdownright)
    }
else
    {
        
        instance_destroy(obj_lightdownright)
    }    
        
       
       if sprite_index = sboyflash_downleft &amp;&amp; key_flash
    {
        
        instance_create(obj_sboy.x-5,obj_sboy.y-1,obj_lightdownleft)
    }
else
    {
        
        instance_destroy(obj_lightdownleft)
    }
    
           if sprite_index = sboyflash_upright &amp;&amp; key_flash
    {
        
        instance_create(obj_sboy.x+5,obj_sboy.y-1,obj_lightupright)
    }
else
    {
        
        instance_destroy(obj_lightupright)
    }

               if sprite_index = sboyflash_upleft &amp;&amp; key_flash
    {
        
        instance_create(obj_sboy.x-2,obj_sboy.y-1,obj_lightupleft)
    }
else
    {
        
        instance_destroy(obj_lightupleft)
    }    
    
    
    
    
    }


//animations
if flashlight = false
{

if (key_left || key_right || key_up || key_down)
{
    move = true;  
}
else 
{
    move = false;
    //normal
    if (characterdirection == "up")
    {
        sprite_index = sboy_back;
    }
    if (characterdirection == "down")
    {
        sprite_index = sboy_front
    }
    if (characterdirection == "left")
    {
        sprite_index = sboy_left;
    }
    if (characterdirection == "right")
    {
        sprite_index = sboy_right;
    }
    
    //ghost
    if (characterdirection == "ghostup")
    {
        sprite_index = sboyghost_back;
    }
    if (characterdirection == "ghostdown")
    {
        sprite_index = sboyghost_front
    }
    if (characterdirection == "ghostleft")
    {
        sprite_index = sboyghost_left;
    }
    if (characterdirection == "ghostright")
    {
        sprite_index = sboyghost_right;
    }
}

if place_meeting(x,y,obj_rm1sboywall)
{
    global.player1ghost = true;    

    if key_up
    {
    characterdirection = "ghostup"
    sprite_index = sboyghost_back
    }

    if key_down
    {
    characterdirection = "ghostdown"
    sprite_index = sboyghost_front
    }

    if key_left
    {
    characterdirection = "ghostleft"
    sprite_index = sboyghost_left
    }
    if key_right
    {
    characterdirection = "ghostright"
    sprite_index = sboyghost_right
    }

}
else
{

    global.player1ghost = false;
    
    if key_up
    {
    characterdirection = "up";
    image_speed = 0.125
    sprite_index = sboy_backwalk
    }

    if key_down
    {
    characterdirection = "down";
    image_speed = 0.125
    sprite_index = sboy_frontwalk
    }

    if key_left
    {
    characterdirection = "left";
    image_speed = 0.125
    sprite_index= sboy_leftwalk
    }        
    
    if key_right
    {
    characterdirection = "right";
    image_speed = 0.125
    sprite_index = sboy_rightwalk;
    }
      
}
}





//with flashlight
if flashlight = true
{


if place_meeting(x,y,obj_rm1sboywall)
{
    global.player1ghost = true;    

    if key_up
    {
    sprite_index = sboyghost_back
    }

    if key_down
    {
    sprite_index = sboyghost_front
    }

    if key_left
    {
    sprite_index = sboyghost_left
    }
    if key_right
    {
    sprite_index = sboyghost_right
    }

}
else
{

if key_flash
{
    global.player1flash = 2;  
    global.player1battery -= 1;
}
else
{
    global.player1flash = 1;
}


    global.player1ghost = false;

    if key_up
    {
    sprite_index = sboyflash_back
    }
        
    if key_down
    {
    sprite_index = sboyflash_front
    }
 
    if key_left &amp;&amp; !key_up
    {
    sprite_index = sboyflash_left
    }
   
     if key_right &amp;&amp; !key_up
    {
    sprite_index = sboyflash_right
    }



// flashlight in use
    
    if key_up &amp;&amp; key_right &amp;&amp; key_flash
    {
    sprite_index = sboyflash_upright
    }
        
    if key_left &amp;&amp; key_up &amp;&amp; key_flash
    {
    sprite_index = sboyflash_upleft
    }

    if key_down &amp;&amp; key_right &amp;&amp; key_flash
    {
    sprite_index = sboyflash_downright
    }
    
        if key_down &amp;&amp; key_left &amp;&amp; key_flash
    {
    sprite_index = sboyflash_downleft
    }       
            
}
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>223</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_current_room</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
